name: CMake

on:
  push

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: [self-hosted]

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        mkdir ${{github.workspace}}/build && cd ${{github.workspace}}/build
        cmake ..

    - name: Build
      # Build your program with the given configuration
      run: |
        cd  ${{github.workspace}}/build
        cmake --build .

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest
      
    - name : Generate Code Coverage
      working-directory: ${{github.workspace}}/build
      run: make coverage_NotWordleUT
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ${{github.workspace}}/build
        files: ./build/coverage_NotWordleUT_dir.xml
        name: codecov-umbrella
        fail_ci_if_error: false
        path_to_write_report: ./coverage/codecov_report.txt
        verbose: true
